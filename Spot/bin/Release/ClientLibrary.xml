<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ClientLibrary</name>
    </assembly>
    <members>
        <member name="T:ClientLibrary.ConnectionUtil">
            <summary>
            Utils for connection to server.
            </summary>
        </member>
        <member name="F:ClientLibrary.ConnectionUtil.LOCAL_ADDRESS">
            <summary>
            Local ip address.
            </summary>
        </member>
        <member name="P:ClientLibrary.ConnectionUtil.COMMUNICATION">
            <summary>
            Instance for communication with server.
            </summary>
        </member>
        <member name="M:ClientLibrary.ConnectionUtil.Close">
            <summary>
            Close communication.
            </summary>
        </member>
        <member name="M:ClientLibrary.ConnectionUtil.ConnectAsync(System.String,System.Int32)">
            <summary>
            Connect to server with specified url and port.
            </summary>
            <param name="url">Url where to connect. <code>IPAddress</code> is got by <code>IPAddress.Parse(url)</code>.</param>
            <param name="port">Port where to connect.</param>
            <see cref="T:System.Net.IPAddress"/>
            <see cref="M:System.Net.IPAddress.Parse(System.String)"/>
            <returns></returns>
        </member>
        <member name="M:ClientLibrary.ConnectionUtil.handShake">
            <summary>
            Do handshake at client client side.
            </summary>
        </member>
        <member name="M:ClientLibrary.ConnectionUtil.disconnect(System.String)">
            <summary>
            Disconnect client and print message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="F:ClientLibrary.config.ClientConfig.SUPPORTED_PROTOCOLS">
            <summary>
            Protocol witch is supported by client.
            </summary>
        </member>
        <member name="F:ClientLibrary.config.ClientConfig.PROTOCOL_FACTORY">
            <summary>
            Protocol factory for making instance protocol by given protocol string.
            </summary>
        </member>
        <member name="T:ClientLibrary.protocol.HandShakeProtocol">
            <summary>
            Handshake protocol for client side.
            </summary>
        </member>
        <member name="M:ClientLibrary.protocol.HandShakeProtocol.HandShakeClient(BaseLibrary.NetworkStream)">
            <summary>
            Do handshake for client side.
            </summary>
            <param name="clientSocket"> Socket from client side to server side</param>
            <returns>null if handShake fail otherwise return instance of AProtocol</returns>
        </member>
        <member name="T:ClientLibrary.robot.MineLayer">
            <summary>
            Instances represent robot who can put mines on map.
            </summary>
        </member>
        <member name="T:ClientLibrary.robot.MineLayer.Mine">
            <summary>
            Structure for information about mine.
            </summary>
        </member>
        <member name="F:ClientLibrary.robot.MineLayer.Mine.X">
            <summary>
            X coordinate on map.
            </summary>
        </member>
        <member name="F:ClientLibrary.robot.MineLayer.Mine.Y">
            <summary>
            Y coordinate on map.
            </summary>
        </member>
        <member name="F:ClientLibrary.robot.MineLayer.Mine.ID">
            <summary>
            Mine id witch is useful for detonation.
            </summary>
        </member>
        <member name="P:ClientLibrary.robot.MineLayer.MINE_GUN">
            <summary>
            Mine gun witch robot has.
            </summary>
        </member>
        <member name="P:ClientLibrary.robot.MineLayer.PuttedMines">
            <summary>
            Number of putted
            </summary>
        </member>
        <member name="F:ClientLibrary.robot.MineLayer.PuttedMinesList">
            <summary>
            List of available mines putted on map.
            </summary>
        </member>
        <member name="M:ClientLibrary.robot.MineLayer.PutMine">
            <summary>
            Put mine on robot position.
            </summary>
        </member>
        <member name="M:ClientLibrary.robot.MineLayer.PutMineAsync(BaseLibrary.command.miner.PutMineAnswerCommand)">
            <summary>
            Put mine on robot position.
            </summary>
            <param name="destination">Where to fill answer data.</param>
        </member>
        <member name="M:ClientLibrary.robot.MineLayer.DetonateMine(System.Int32)">
            <summary>
            Detonate specified mine.
            </summary>
            <param name="mineId">witch mine robot wants to detonate.</param>
            <returns></returns>
        </member>
        <member name="M:ClientLibrary.robot.MineLayer.DetonateMineAsync(BaseLibrary.command.miner.DetonateMineAnswerCommand,System.Int32)">
            <summary>
            Detonate specified mine. Send action to erver asynchronously.
            </summary>
            <param name="destination">Where to fill answer data.</param>
            <param name="mineId">witch mine robot wants to detonate.</param>
            <returns></returns>
        </member>
        <member name="M:ClientLibrary.robot.MineLayer.GetRobotType">
            <inheritdoc />
        </member>
        <member name="M:ClientLibrary.robot.MineLayer.SetClassEquip(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:ClientLibrary.robot.MineLayer.GetClassEquip">
            <inheritdoc />
        </member>
        <member name="T:ClientLibrary.robot.Repairman">
            <summary>
            Instances represent robot who can repair other robots.
            </summary>
        </member>
        <member name="P:ClientLibrary.robot.Repairman.REPAIR_TOOL">
            <summary>
            Repair tool witch robot has.
            </summary>
        </member>
        <member name="M:ClientLibrary.robot.Repairman.Repair">
            <summary>
            Repair robots in max range.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClientLibrary.robot.Repairman.Repair(System.Int32)">
            <summary>
            Repair robots closer then <code>maxDistance</code>.
            </summary>
            <param name="maxDistance">How far can be robots witch will be repaired.</param>
            <returns></returns>
        </member>
        <member name="M:ClientLibrary.robot.Repairman.RepairAsync(BaseLibrary.command.repairman.RepairAnswerCommand)">
            <summary>
            Repair robots in max range. And send it to server asynchronously.
            </summary>
            <param name="destination">Where to fill answer data.</param>
            <returns></returns>
        </member>
        <member name="M:ClientLibrary.robot.Repairman.RepairAsync(BaseLibrary.command.repairman.RepairAnswerCommand,System.Int32)">
            <summary>
            Repair robots closer then <code>maxDistance</code>. And send it to server asynchronously.
            </summary>
            <param name="destination">Where to fill answer data.</param>
            <param name="maxDistance">How far can be robots witch will be repaired.</param>
            <returns></returns>
        </member>
        <member name="M:ClientLibrary.robot.Repairman.GetRobotType">
            <inheritdoc />
        </member>
        <member name="M:ClientLibrary.robot.Repairman.SetClassEquip(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:ClientLibrary.robot.Repairman.GetClassEquip">
            <inheritdoc />
        </member>
        <member name="T:ClientLibrary.robot.ClientRobot">
            <summary>
            Abstract class for robot's classes at client side. Implement all common methods.
            </summary>
        </member>
        <member name="F:ClientLibrary.robot.ClientRobot.TEAM_NAME">
            <summary>
            Team name which is globally unique.
            </summary>
        </member>
        <member name="M:ClientLibrary.robot.ClientRobot.Connect(System.String[])">
            <summary>
            Do connection to server.
            </summary>
            <param name="args">
              <list type="bullet">
                <item>
                  <description><code>args[0]</code> is IP adress of server.</description>
                </item>
                <item>
                  <description><code>args[1]</code> is port.</description>
                </item>
                <item>
                  <description>If <code>args.length &lt; 2</code> then default port is choose, if <code>args.length &lt; 1</code> then local adress is use as ip.</description>
                </item>
              </list>
            </param>
            <returns>Game type</returns>
        </member>
        <member name="M:ClientLibrary.robot.ClientRobot.EndTurn">
            <summary>
            End turn - every robots who do not send command will send command <code>Wait</code>.
            </summary>
            <seealso cref="M:ClientLibrary.robot.ClientRobot.Wait"/>
        </member>
        <member name="P:ClientLibrary.robot.ClientRobot.MAX_LAP">
            <summary>
            How many lap will play.
            </summary>
        </member>
        <member name="P:ClientLibrary.robot.ClientRobot.LAP">
            <summary>
            Number of actual lap.
            </summary>
        </member>
        <member name="P:ClientLibrary.robot.ClientRobot.MAX_TURN">
            <summary>
            How many turn is maximally in one lap.
            </summary>
        </member>
        <member name="P:ClientLibrary.robot.ClientRobot.TURN">
            <summary>
            Number of actual turn.
            </summary>
        </member>
        <member name="F:ClientLibrary.robot.ClientRobot.sns">
            <summary>
            Communication with server.
            </summary>
        </member>
        <member name="F:ClientLibrary.robot.ClientRobot.name">
            <summary>
            Robot's name.
            </summary>
        </member>
        <member name="F:ClientLibrary.robot.ClientRobot.teamName">
            <summary>
            Robot's team name.
            </summary>
        </member>
        <member name="F:ClientLibrary.robot.ClientRobot.connected">
            <summary>
            Flag if is robot already connected.
            </summary>
        </member>
        <member name="M:ClientLibrary.robot.ClientRobot.#ctor(System.String)">
            <summary>
            Create new instance of robot. Robot's team name is <code>TEAM_NAME</code>
            </summary>
            <seealso cref="F:ClientLibrary.robot.ClientRobot.TEAM_NAME"/>
            <param name="name"> name of this robot</param>
        </member>
        <member name="M:ClientLibrary.robot.ClientRobot.#ctor(System.String,System.String)">
            <summary>
            Create new instance of robot.
            </summary>
            <param name="name"> name of this robot</param>
            <param name="teamName">name of team</param>
        </member>
        <member name="M:ClientLibrary.robot.ClientRobot.Connect(System.String,System.Int32)">
            <summary>
            Connect unconnected robot.
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:ClientLibrary.robot.ClientRobot.Init(System.String,System.String)">
            <summary>
            Set robot name and team name.
            </summary>
            <param name="name"> name of this robot</param>
            <param name="teamName">name of team (suggest to use <code>Guid.NewGuid().ToString();</code> for getting name</param>
            <returns></returns>
        </member>
        <member name="M:ClientLibrary.robot.ClientRobot.InitAsync(BaseLibrary.command.handshake.InitAnswerCommand,System.String,System.String)">
            <summary>
            Set robot name and team name and send it to server asynchronously.
            </summary>
            <param name="name"> name of this robot</param>
            <param name="teamName">name of team (suggest to use <code>Guid.NewGuid().ToString();</code> for getting name</param>
            <returns></returns>
        </member>
        <member name="M:ClientLibrary.robot.ClientRobot.GetRobotType">
            <summary>
            What kind of robot it is.
            </summary>
            <seealso cref="T:BaseLibrary.command.handshake.RobotType"/>
            <returns></returns>
        </member>
        <member name="M:ClientLibrary.robot.ClientRobot.LoadEquip">
            <summary>
            Get equipment from server.
            </summary>
        </member>
        <member name="M:ClientLibrary.robot.ClientRobot.ProcessInit(BaseLibrary.command.handshake.InitAnswerCommand)">
            <summary>
            Set robot id and equipment
            </summary>
            <param name="init"></param>
        </member>
        <member name="M:ClientLibrary.robot.ClientRobot.SetClassEquip(System.Int32)">
            <summary>
            Set class equipment to robot by id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ClientLibrary.robot.ClientRobot.GetClassEquip">
            <summary>
            What class equipment id is had by robot.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClientLibrary.robot.ClientRobot.Drive(System.Double,System.Double)">
            <summary>
            Set percentage power of motor and direction. At the end set <code>AngleDrive</code> if rotation success.
            </summary>
            <param name="angle">in degree. 0 = 3 hour. 90 = 6 hour and so on.</param>
            <param name="power">percentage from 0 to 100.</param>
            <seealso cref="!:AngleDrive"/>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ClientLibrary.robot.ClientRobot.DriveAsync(BaseLibrary.command.common.DriveAnswerCommand,System.Double,System.Double)" -->
        <member name="M:ClientLibrary.robot.ClientRobot.Scan(System.Double,System.Double)">
            <summary>
            Robot make scan to angle and witch precision. That is mean if scanned robot is in angle to robot in range (angle - precision, angle+precision) it is success.
            </summary>
            <param name="angle">in degree. 0 is 3 hour. 90 is 6 hour and so on. 12 hour in up.</param>
            <param name="precision">parameter for sector. Min is 0 max is 10</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ClientLibrary.robot.ClientRobot.ScanAsync(BaseLibrary.command.common.ScanAnswerCommand,System.Double,System.Double)" -->
        <member name="M:ClientLibrary.robot.ClientRobot.ProcessState(BaseLibrary.command.common.RobotStateCommand)">
            <summary>
            Set x,y coordinates, hit points and power. Set score and gold and call <code>sendMerchant</code> if is end of lap
            </summary>
            <seealso cref="M:ClientLibrary.robot.ClientRobot.SendMerchant"/>
            <param name="state"></param>
        </member>
        <member name="M:ClientLibrary.robot.ClientRobot.Wait">
            <summary>
            Robot will do nothing for this turn. He still move.
            </summary>
        </member>
        <member name="M:ClientLibrary.robot.ClientRobot.WaitAsync">
            <summary>
            Robot set action to do nothing and sent it to server asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClientLibrary.robot.ClientRobot.Merchant(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Send request for buying motorId, armorId, classEquipmentId and repairHitPoints.
            </summary>
            <param name="motorId"></param>
            <param name="armorId"></param>
            <param name="classEquipmentId"></param>
            <param name="repairHitPoints"></param>
            <returns></returns>
        </member>
        <member name="M:ClientLibrary.robot.ClientRobot.MerchantAsync(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Asynchronously send request for buying motorId, armorId, classEquipmentId and repairHitPoints.
            </summary>
            <param name="motorId"></param>
            <param name="armorId"></param>
            <param name="classEquipmentId"></param>
            <param name="repairHitPoints"></param>
            <returns></returns>
        </member>
        <member name="M:ClientLibrary.robot.ClientRobot.SendMerchant">
            <summary>
            Setting what you want to buy at the end of lap. Use <code>Merchant</code> method for buying.
            </summary>
            <seealso cref="M:ClientLibrary.robot.ClientRobot.Merchant(System.Int32,System.Int32,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ClientLibrary.robot.ClientRobot.ProcessMerchant(BaseLibrary.command.common.MerchantAnswerCommand)">
            <summary>
            Processing merchant answer. Set motor, armor and class equipment.
            </summary>
            <param name="merchantAnswer"></param>
        </member>
        <member name="M:ClientLibrary.robot.ClientRobot.sendCommandAsync(BaseLibrary.command.ACommand)">
            <summary>
            Asynchronously sending command.
            </summary>
            <param name="command">Instance of command witch you want to send.</param>
            <returns></returns>
        </member>
        <member name="M:ClientLibrary.robot.ClientRobot.receiveCommandAsync``1">
            <summary>
            Asynchronously receiving command from server.
            </summary>
            <returns>Command</returns>
        </member>
        <member name="M:ClientLibrary.robot.ClientRobot.receiveCommand``1">
            <summary>
            Receiving command from server.
            </summary>
            <returns>Command</returns>
        </member>
        <member name="M:ClientLibrary.robot.ClientRobot.afterConnect">
            <summary>
            Specify what to do at the end of Connection.
            </summary>
        </member>
        <member name="T:ClientLibrary.robot.Tank">
            <summary>
            Instances represent robot who can shoot bullets.
            </summary>
        </member>
        <member name="P:ClientLibrary.robot.Tank.GUN">
            <summary>
            Gun witch robot has.
            </summary>
        </member>
        <member name="M:ClientLibrary.robot.Tank.Shoot(System.Double,System.Double)">
            <summary>
            Shoot bullet.
            </summary>
            <param name="angle">in degree. 0 = 3 hour. 90 = 6 hour and so on.</param>
            <param name="range">how far this robot wants to shot</param>
        </member>
        <member name="M:ClientLibrary.robot.Tank.ShootAsync(BaseLibrary.command.tank.ShootAnswerCommand,System.Double,System.Double)">
            <summary>
            Shoot bullet. And sent it to server asynchronously.
            </summary>
            <param name="destination">Where to fill answer data.</param>
            <param name="angle">in degree. 0 = 3 hour. 90 = 6 hour and so on.</param>
            <param name="range">how far this robot wants to shot</param>
        </member>
        <member name="M:ClientLibrary.robot.Tank.GetRobotType">
            <inheritdoc />
        </member>
        <member name="M:ClientLibrary.robot.Tank.SetClassEquip(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:ClientLibrary.robot.Tank.GetClassEquip">
            <inheritdoc />
        </member>
    </members>
</doc>
